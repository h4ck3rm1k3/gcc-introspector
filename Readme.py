"""
GCC node type micro service


uses my branch of the c preprocessor
https://sourceforge.net/u/mdupont/cpip/ci/default/tree/

"""

import sys
import types
import cpp
from python_class_gen import PythonClassGen

class NodeBase :
    """
    base class for all nodes
    """
    pass

class DefNodeClass(PythonClassGen):
    """
    node classes are base classes of node types

    List of properties relevant to the database
    ..  :py:attribute:node_class

    """
    def __init__(self, node_class):
        self._node_class=node_class

    @property
    def node_class(self):
        """
Node Class

is the attribute that defines the class name in gcc.

:name: node_class
:db_null: False
:db_type: CharField
:db_max_length: 25
:db_index: True
:db_unique: True
:db_verbose_name: node class name
:db_help_text: The node class is the base class of the node type
:db_column: node_class_name
:db_default: None
:db_choices: None
:db_primary_key: None
:db_sequence: None
:db_constraints: None
:db_schema: None"""
        return self._node_class

    def class_name(self):
        return self.transform_class_name(self.node_class)

    def class_doc(self):
        return """Autogenerated node_class based on usage in tree.def
        with the following parameters :
            node_class : {_node_class}
        """.format(**self.__dict__)

    @staticmethod
    def module_name():
        return "gcc_node_base_class"

    def base_classes(self):
        return (NodeBase,)

    def object_data(self):
        # todo: maybe we done want to  put this meta data into the object itself,
        # maybe put it into the type object, or make it static

        return {
            'node_class' : self.node_class
        }


class DefTreeCode(PythonClassGen):
    """
    tree codes are specific declared types of tree nodes,
    they are derived from the class named by node_class
    """
    def __init__(self, macro_name, struct_name, node_class, argc):
        self.macro_name=macro_name # the enum name in the system
        self.struct_name=struct_name # the class name
        self.node_class=node_class # the base class of the node type
        self.argc=argc # the number of argument slots to allocate

    def class_name(self):
        return self.transform_class_name(self.macro_name)

    def node_class_name(self):
        return self.transform_class_name(self.node_class)

    def class_doc(self):
        return """Autogenerated class based on tree.def
        with the following parameters :
            macro_name : {macro_name}
            struct_name : {struct_name}
            node_class : {node_class}
            argc : {argc}
        """.format(**self.__dict__)

    @staticmethod
    def module_name():
        return "gcc_node_types"

    def base_classes(self):
        module_name = DefNodeClass.module_name()
        module = sys.modules[module_name]
        klass = getattr(module, self.node_class_name())
        return (klass,)

    def object_data(self):
        # todo: maybe we done want to  put this meta data into the object itself,
        # maybe put it into the type object, or make it static
        return {
            'node_class' : self.node_class,
            'macro_name' : self.macro_name,
            'struct_name' : self.struct_name,
            'argc' : self.argc
        }

class TreeDefSourceFile(object):
    """
    parser for processing the source file
    install a method on the webserver to read in the codes
    we also want to have a singleton of this object available, we can do that via class object

    example: 

    DEFTREECODE (  BLAH_NODE,     "blah_node",     tcc_exceptional, 0)

    The third field is the DefNodeClass name 

    """
    filename= '../gcc/gcc/tree.def'

    def __init__(self):
        self._codes = cpp.tree_codes(self.filename)
        self._node_classes = {}
        self._init_node_classes()

    def _init_node_classes(self):
        """
        create a DefNodeClass for each node class 
        in the list of objects.
        """
        for obj in self._codes:
            name = obj[2]
            if name not in self._node_classes:
                self._node_classes[name]=DefNodeClass(name)

    def node_classes(self):
        return  self._node_classes.values()

    def tree_codes(self):
        for obj in self._codes:
            yield DefTreeCode(obj[0],
                              obj[1],
                              obj[2],
                              obj[3])

    def populate_database(self):
        """
        get the DefTreeCode database class
        and add in all the _node_classes to it.
        """
        
        
class TreeDefSourceFileApi:
    """

    singleton object for webserver interfacing
    we dont need to manage the data in the webserver itself.

    """   
    tree_def_source =  TreeDefSourceFile()
